package com.vtt.controllers;



import com.vtt.commonfunc.TokenUtils;
import com.vtt.dtoforSrc.SerialNoProductDTO;
import com.vtt.entities.*;

import com.vtt.repository.DisplayNamesCatRepository;
import com.vtt.repository.LabelGeneratedRepository;
import com.vtt.repository.SerialNoProductRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import java.time.Instant;
import java.util.*;

@RestController
@RequestMapping("/api/serial-products")
@RequiredArgsConstructor
public class SerialNoProductController {

    @Autowired
    private SerialNoProductRepository serialNoProductRepository;

    @Autowired
    private LabelGeneratedRepository labelGeneratedRepository;

    @Autowired
    private DisplayNamesCatRepository displayNamesCatRepository;

    @Autowired
    private TokenUtils tokenUtils;

    @PostMapping
    public ResponseEntity<?> createOrUpdateSerialNoProduct(
            @RequestBody SerialNoProductDTO dto,
            @RequestHeader("Authorization") String tokenHeader) {

        try {
            // Get the requesting user from the token
            User requestingUser = tokenUtils.getUserFromToken(tokenHeader);
//        if (requestingUser.getMainRole() != MainRole.ADMIN && requestingUser.getMainRole() != MainRole.PACKING) {
//            return ResponseEntity.status(HttpStatus.FORBIDDEN)
//                    .body("Only ADMIN and PACKING_MAN can access this endpoint");
//        }

            // Fetch LabelGenerated by ID
            Optional<LabelGenerated> labelOpt = labelGeneratedRepository.findById(dto.getLabelGeneratedId());
            if (labelOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid LabelGenerated ID");
            }

            // Fetch default DisplayNamesCat
            Optional<DisplayNamesCat> defaultDisplayOpt = displayNamesCatRepository.findById(dto.getDefaultDisplayNameCatId());
            if (defaultDisplayOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid Default DisplayNamesCat ID");
            }

            // Check if SerialNoProduct with referredLabelNumber already exists
            Optional<SerialNoProduct> existingProductOpt =
                    serialNoProductRepository.findByReferredLabelNumber(dto.getReferredLabelNumber());

            // If it exists, update it; otherwise, create a new one
            SerialNoProduct product = existingProductOpt.orElse(new SerialNoProduct());
            product.setReferredLabelNumber(dto.getReferredLabelNumber());
            product.setLabelGenerated(labelOpt.get());
            product.setCommonMRP(dto.getCommonMRP());
            product.setCommonArticle(dto.getCommonArticle());
            product.setCommonFabricName(dto.getCommonFabricName());
            product.setCommonColor(dto.getCommonColor());
            product.setDefaultDisplayNameCat(defaultDisplayOpt.get());

            product.setUpdatedAt(Instant.now());
            if (existingProductOpt.isEmpty()) {
                product.setCreatedAt(Instant.now());
            }

            // -------------------------
            // Prepare display list
            // -------------------------
            List<SerialNoProduct.DisplayWithSizes> displayList = new ArrayList<>();
            for (SerialNoProductDTO.DisplayWithSizesDTO entry : dto.getDisplayNamesList()) {
                Optional<DisplayNamesCat> dispCat = displayNamesCatRepository.findById(entry.getDisplayNameCatId());
                if (dispCat.isPresent()) {
                    SerialNoProduct.DisplayWithSizes displayWithSizes = new SerialNoProduct.DisplayWithSizes();
                    displayWithSizes.setDisplayNameCat(dispCat.get());

                    // price handling
                    String priceStr = entry.getPrice();
                    double price;
                    if (priceStr == null || priceStr.isEmpty()) {
                        price = dto.getCommonMRP();
                    } else {
                        try {
                            price = Double.parseDouble(priceStr);
                        } catch (NumberFormatException e) {
                            price = dto.getCommonMRP(); // fallback if parsing fails
                        }
                    }
                    displayWithSizes.setPrice(price);
                    displayWithSizes.setSeprateColor(entry.getSeprateColor());

                    // sizes mapping
                    List<SerialNoProduct.SizeCompleted> sizes = new ArrayList<>();
                    if (entry.getSizes() != null) {
                        for (SerialNoProductDTO.SizeCompletedDTO sizeDto : entry.getSizes()) {
                            SerialNoProduct.SizeCompleted size = new SerialNoProduct.SizeCompleted();
                            size.setSizeName(sizeDto.getSizeName());
                            size.setQuantity(sizeDto.getQuantity());
                            sizes.add(size);
                        }
                    }
                    displayWithSizes.setSizes(sizes);

                    // âœ… seprateSetAvailable mapping
                    List<SerialNoProduct.SizeSet> separateSets = new ArrayList<>();
                    if (entry.getSeprateSetAvailable() != null) {
                        for (SerialNoProductDTO.SizeSetDTO setDto : entry.getSeprateSetAvailable()) {
                            SerialNoProduct.SizeSet sizeSet = new SerialNoProduct.SizeSet();
                            sizeSet.setSetId(setDto.getSetId());
                            sizeSet.setSetName(setDto.getSetName());
                            sizeSet.setSetQuantity(setDto.getSetQuantity());

                            List<SerialNoProduct.SizeSet.SizeQuantity> sizeQuantities = new ArrayList<>();
                            if (setDto.getSizes() != null) {
                                for (SerialNoProductDTO.SizeSetDTO.SizeQuantityDTO sqDto : setDto.getSizes()) {
                                    SerialNoProduct.SizeSet.SizeQuantity sq = new SerialNoProduct.SizeSet.SizeQuantity();
                                    sq.setLabel(sqDto.getLabel());
                                    sq.setQuantity(sqDto.getQuantity());
                                    sizeQuantities.add(sq);
                                }
                            }
                            sizeSet.setSizes(sizeQuantities);
                            separateSets.add(sizeSet);
                        }
                    }
                    displayWithSizes.setSeprateSetAvailable(separateSets);

                    displayList.add(displayWithSizes);
                }
            }
            product.setDisplayNamesList(displayList);

            // -------------------------
            // Prepare global setAvailable list
            // -------------------------
            List<SerialNoProduct.SizeSet> sizeSets = new ArrayList<>();
            if (dto.getSetAvailable() != null) {
                for (SerialNoProductDTO.SizeSetDTO setDto : dto.getSetAvailable()) {
                    SerialNoProduct.SizeSet sizeSet = new SerialNoProduct.SizeSet();
                    sizeSet.setSetId(setDto.getSetId());
                    sizeSet.setSetName(setDto.getSetName());
                    sizeSet.setSetQuantity(setDto.getSetQuantity());

                    List<SerialNoProduct.SizeSet.SizeQuantity> sizeQuantities = new ArrayList<>();
                    if (setDto.getSizes() != null) {
                        for (SerialNoProductDTO.SizeSetDTO.SizeQuantityDTO sqDto : setDto.getSizes()) {
                            SerialNoProduct.SizeSet.SizeQuantity sq = new SerialNoProduct.SizeSet.SizeQuantity();
                            sq.setLabel(sqDto.getLabel());
                            sq.setQuantity(sqDto.getQuantity());
                            sizeQuantities.add(sq);
                        }
                    }
                    sizeSet.setSizes(sizeQuantities);
                    sizeSets.add(sizeSet);
                }
            }
            product.setSetAvailable(sizeSets);

            // -------------------------
            // Save the product
            // -------------------------
            SerialNoProduct saved = serialNoProductRepository.save(product);
            return ResponseEntity.ok(saved);

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error: " + e.getMessage());
        }
    }

//    @PostMapping
//    public ResponseEntity<?> createOrUpdateSerialNoProduct(
//            @RequestBody SerialNoProductDTO dto,
//            @RequestHeader("Authorization") String tokenHeader) {
//
//        try {
//            // Get the requesting user from the token
//            User requestingUser = tokenUtils.getUserFromToken(tokenHeader);
////            if (requestingUser.getMainRole() != MainRole.ADMIN && requestingUser.getMainRole() != MainRole.PACKING) {
////                return ResponseEntity.status(HttpStatus.FORBIDDEN)
////                        .body("Only ADMIN and PACKING_MAN can access this endpoint");
////            }
//
//            // Fetch LabelGenerated by ID
//            Optional<LabelGenerated> labelOpt = labelGeneratedRepository.findById(dto.getLabelGeneratedId());
//            if (labelOpt.isEmpty()) {
//                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid LabelGenerated ID");
//            }
//
//            // Fetch default DisplayNamesCat
//            Optional<DisplayNamesCat> defaultDisplayOpt = displayNamesCatRepository.findById(dto.getDefaultDisplayNameCatId());
//            if (defaultDisplayOpt.isEmpty()) {
//                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid Default DisplayNamesCat ID");
//            }
//
//            // Check if SerialNoProduct with referredLabelNumber already exists
//            Optional<SerialNoProduct> existingProductOpt = serialNoProductRepository.findByReferredLabelNumber(dto.getReferredLabelNumber());
//
//            // If it exists, update it; otherwise, create a new one
//            SerialNoProduct product = existingProductOpt.orElse(new SerialNoProduct());
//            product.setReferredLabelNumber(dto.getReferredLabelNumber());
//            product.setLabelGenerated(labelOpt.get());
//            product.setCommonMRP(dto.getCommonMRP());
//            product.setCommonArticle(dto.getCommonArticle());
//            product.setCommonFabricName(dto.getCommonFabricName());
//            product.setCommonColor(dto.getCommonColor());
//            product.setDefaultDisplayNameCat(defaultDisplayOpt.get());
//
//            product.setUpdatedAt(Instant.now());
//            if (existingProductOpt.isEmpty()) {
//                product.setCreatedAt(Instant.now());
//            }
//
//            // Prepare display list
//            List<SerialNoProduct.DisplayWithSizes> displayList = new ArrayList<>();
//            for (SerialNoProductDTO.DisplayWithSizesDTO entry : dto.getDisplayNamesList()) {
//                Optional<DisplayNamesCat> dispCat = displayNamesCatRepository.findById(entry.getDisplayNameCatId());
//                if (dispCat.isPresent()) {
//                    SerialNoProduct.DisplayWithSizes displayWithSizes = new SerialNoProduct.DisplayWithSizes();
//                    displayWithSizes.setDisplayNameCat(dispCat.get());
//                   //get price
//                    String priceStr = entry.getPrice();
//                    double price;
//                    if (priceStr == null || priceStr.isEmpty()) {
//                        price = dto.getCommonMRP();
//                    } else {
//                        try {
//                            price = Double.parseDouble(priceStr);
//                        } catch (NumberFormatException e) {
//                            price = dto.getCommonMRP(); // fallback if parsing fails
//                        }
//                    }
//                    displayWithSizes.setPrice(price);
//                    displayWithSizes.setSeprateColor(entry.getSeprateColor());
//
//                    List<SerialNoProduct.SizeCompleted> sizes = new ArrayList<>();
//                    for (SerialNoProductDTO.SizeCompletedDTO sizeDto : entry.getSizes()) {
//                        SerialNoProduct.SizeCompleted size = new SerialNoProduct.SizeCompleted();
//                        size.setSizeName(sizeDto.getSizeName());
//                        size.setQuantity(sizeDto.getQuantity());
//                        sizes.add(size);
//                    }
//
//                    displayWithSizes.setSizes(sizes);
//                    displayList.add(displayWithSizes);
//                }
//            }
//
//            product.setDisplayNamesList(displayList);
//
//            // Prepare setAvailable list
//            List<SerialNoProduct.SizeSet> sizeSets = new ArrayList<>();
//            if (dto.getSetAvailable() != null) {
//                for (SerialNoProductDTO.SizeSetDTO setDto : dto.getSetAvailable()) {
//                    SerialNoProduct.SizeSet sizeSet = new SerialNoProduct.SizeSet();
//                    sizeSet.setSetId(setDto.getSetId());
//                    sizeSet.setSetName(setDto.getSetName());
//                    sizeSet.setSetQuantity(setDto.getSetQuantity());
//
//                    List<SerialNoProduct.SizeSet.SizeQuantity> sizeQuantities = new ArrayList<>();
//                    if (setDto.getSizes() != null) {
//                        for (SerialNoProductDTO.SizeSetDTO.SizeQuantityDTO sqDto : setDto.getSizes()) {
//                            SerialNoProduct.SizeSet.SizeQuantity sq = new SerialNoProduct.SizeSet.SizeQuantity();
//                            sq.setLabel(sqDto.getLabel());
//                            sq.setQuantity(sqDto.getQuantity());
//                            sizeQuantities.add(sq);
//                        }
//                    }
//                    sizeSet.setSizes(sizeQuantities);
//                    sizeSets.add(sizeSet);
//                }
//            }
//            product.setSetAvailable(sizeSets);
//
//
//            // Save the product (either update or create new)
//            SerialNoProduct saved = serialNoProductRepository.save(product);
//
//            return ResponseEntity.ok(saved);
//
//        } catch (Exception e) {
//            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//                    .body("Error: " + e.getMessage());
//        }
//
//
//    }
    @GetMapping("/{referredLabelNumber}")
    public ResponseEntity<?> getByReferredLabelNumber(@PathVariable String referredLabelNumber) {
        try {
            Optional<SerialNoProduct> productOpt = serialNoProductRepository.findByReferredLabelNumber(referredLabelNumber);
            if (productOpt.isEmpty()) {
                return ResponseEntity.status(HttpStatus.NOT_FOUND)
                        .body("No product found with referredLabelNumber: " + referredLabelNumber);
            }
            return ResponseEntity.ok(productOpt.get());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Error: " + e.getMessage());
        }
    }

}
